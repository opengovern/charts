COMPUTED VALUES:
aws:
  accountID: xxx
dex:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
  commonLabels: {}
  config:
    connectors: []
    enablePasswordDB: true
    expiry:
      deviceRequests: 5m
      idTokens: 24h
      refreshTokens:
        absoluteLifetime: 3960h
        reuseInterval: 3s
        validIfNotUsedFor: 2160h
      signingKeys: 6h
    grpc:
      addr: localhost:5557
      reflection: true
    logger:
      format: text
      level: debug
    oauth2:
      alwaysShowLoginScreen: false
      passwordConnector: local
      skipApprovalScreen: true
    storage:
      config:
        database: dex
        host: opengovernance-postgresql-primary.opengovernance.svc.cluster.local
        password: password
        port: 5432
        ssl:
          mode: disable
        user: dex_service
      type: postgres
  configSecret:
    create: false
    name: ""
  deploymentAnnotations: {}
  deploymentLabels: {}
  env: {}
  envFrom: []
  envVars: []
  fullnameOverride: ""
  global:
    debugMode: true
    domain: og.app.domain
    metricsService: disable
    size: lg
  grpc:
    enabled: true
  hostAliases: []
  https:
    enabled: false
  image:
    pullPolicy: Always
    repository: ghcr.io/opengovern/dex-login
    tag: v2.60.0
  imagePullSecrets: []
  ingress:
    annotations: {}
    className: ""
    enabled: false
    hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls: []
  nameOverride: ""
  networkPolicy:
    egressRules: []
    enabled: false
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: null
    minAvailable: null
  podLabels: {}
  podSecurityContext: {}
  priorityClassName: ""
  rbac:
    create: true
    createClusterScoped: true
  replicaCount: 1
  resources: {}
  revisionHistoryLimit: 10
  securityContext: {}
  service:
    annotations: {}
    clusterIP: ""
    ports:
      grpc:
        nodePort: null
        port: 5557
      http:
        nodePort: null
        port: 5556
      https:
        nodePort: null
        port: 5554
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  serviceMonitor:
    annotations: {}
    bearerTokenFile: null
    enabled: false
    honorLabels: false
    interval: null
    labels: {}
    metricRelabelings: []
    namespace: ""
    path: /metrics
    relabelings: []
    scheme: ""
    scrapeTimeout: null
    tlsConfig: {}
  strategy: {}
  tolerations: []
  topologySpreadConstraints: []
  volumeMounts: []
  volumes: []
externalOpensearch:
  awsRegion: us-east-1
  enabled: false
  endpoint: https://opensearch.example.com
  roleArn: arn:aws:iam::000000000000:role/opensearch-fullaccess
externalPostgresql:
  enabled: false
  endpoint: pg.example.com
  masterPassword: postgres
  masterUser: postgres
  port: "5432"
  sslMode: disable
github:
  token: ""
global:
  debugMode: true
  domain: og.app.domain
  metricsService: disable
  size: lg
keda:
  additionalAnnotations: {}
  additionalLabels: {}
  affinity: {}
  asciiArt: true
  certificates:
    autoGenerated: true
    certManager:
      caSecretName: kedaorg-ca
      duration: 8760h0m0s
      enabled: false
      generateCA: true
      issuer:
        generate: true
        group: cert-manager.io
        kind: ClusterIssuer
        name: foo-org-ca
      renewBefore: 5840h0m0s
      secretTemplate: {}
    mountPath: /certs
    operator: null
    secretName: kedaorg-certs
  clusterDomain: cluster.local
  clusterName: kubernetes-default
  crds:
    additionalAnnotations: {}
    install: true
  customManagedBy: ""
  enabled: true
  env: []
  extraArgs:
    keda: {}
    metricsAdapter: {}
  extraObjects: []
  global:
    debugMode: true
    domain: og.app.domain
    image:
      registry: null
    metricsService: disable
    size: lg
  grpcTLSCertsSecret: ""
  hashiCorpVaultTLS: ""
  http:
    keepAlive:
      enabled: true
    minTlsVersion: TLS12
    timeout: 3000
  image:
    keda:
      registry: ghcr.io
      repository: kedacore/keda
      tag: ""
    metricsApiServer:
      registry: ghcr.io
      repository: kedacore/keda-metrics-apiserver
      tag: ""
    pullPolicy: Always
    webhooks:
      registry: ghcr.io
      repository: kedacore/keda-admission-webhooks
      tag: ""
  imagePullSecrets: []
  logging:
    metricServer:
      level: 0
      stderrthreshold: ERROR
    operator:
      format: console
      level: info
      stackTracesEnabled: false
      timeEncoding: rfc3339
    webhooks:
      format: console
      level: info
      timeEncoding: rfc3339
  metricsServer:
    affinity: {}
    disableCompression: true
    dnsPolicy: ClusterFirst
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 3
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    revisionHistoryLimit: 10
    useHostNetwork: false
  networkPolicy:
    cilium:
      operator:
        extraEgressRules: []
    enabled: false
    flavor: cilium
  nodeSelector: {}
  opentelemetry:
    collector:
      uri: ""
    operator:
      enabled: false
  operator:
    affinity: {}
    disableCompression: true
    extraContainers: []
    extraInitContainers: []
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 25
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    name: keda-operator
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 20
      periodSeconds: 3
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    revisionHistoryLimit: 10
  permissions:
    metricServer:
      restrict:
        secret: false
    operator:
      restrict:
        namesAllowList: []
        secret: false
  podAnnotations:
    keda: {}
    metricsAdapter: {}
    webhooks: {}
  podDisruptionBudget:
    metricServer: {}
    operator: {}
    webhooks: {}
  podIdentity:
    aws:
      irsa:
        audience: sts.amazonaws.com
        enabled: false
        roleArn: ""
        stsRegionalEndpoints: "true"
        tokenExpiration: 86400
    azureWorkload:
      clientId: ""
      enabled: false
      tenantId: ""
      tokenExpiration: 3600
    gcp:
      enabled: false
      gcpIAMServiceAccount: ""
  podLabels:
    keda: {}
    metricsAdapter: {}
    webhooks: {}
  podSecurityContext:
    metricServer:
      runAsNonRoot: true
    operator:
      runAsNonRoot: true
    webhooks:
      runAsNonRoot: true
  priorityClassName: ""
  profiling:
    metricsServer:
      enabled: false
      port: 8083
    operator:
      enabled: false
      port: 8082
    webhooks:
      enabled: false
      port: 8084
  prometheus:
    metricServer:
      enabled: false
      podMonitor:
        additionalLabels: {}
        enabled: false
        interval: ""
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
      port: 8080
      portName: metrics
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        interval: ""
        jobLabel: ""
        metricRelabelings: []
        podTargetLabels: []
        port: metrics
        relabelings: []
        relabellings: []
        scheme: http
        scrapeTimeout: ""
        targetLabels: []
        targetPort: ""
        tlsConfig: {}
    operator:
      enabled: false
      podMonitor:
        additionalLabels: {}
        enabled: false
        interval: ""
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
      port: 8080
      prometheusRules:
        additionalLabels: {}
        alerts: []
        enabled: false
        namespace: ""
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        interval: ""
        jobLabel: ""
        metricRelabelings: []
        podTargetLabels: []
        port: metrics
        relabelings: []
        relabellings: []
        scheme: http
        scrapeTimeout: ""
        targetLabels: []
        targetPort: ""
        tlsConfig: {}
    webhooks:
      enabled: false
      port: 8080
      prometheusRules:
        additionalLabels: {}
        alerts: []
        enabled: false
        namespace: ""
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        interval: ""
        jobLabel: ""
        metricRelabelings: []
        podTargetLabels: []
        port: metrics
        relabelings: []
        relabellings: []
        scheme: http
        scrapeTimeout: ""
        targetLabels: []
        targetPort: ""
        tlsConfig: {}
  rbac:
    aggregateToDefaultRoles: false
    create: true
    enabledCustomScaledRefKinds: true
    scaledRefKinds:
    - apiGroup: '*'
      kind: '*'
  resources:
    metricServer:
      limits:
        cpu: 1
        memory: 1000Mi
      requests:
        cpu: 100m
        memory: 100Mi
    operator:
      limits:
        cpu: 1
        memory: 1000Mi
      requests:
        cpu: 100m
        memory: 100Mi
    webhooks:
      limits:
        cpu: 1
        memory: 1000Mi
      requests:
        cpu: 100m
        memory: 100Mi
  securityContext:
    metricServer:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
    operator:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
    webhooks:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
  service:
    annotations: {}
    portHttps: 443
    portHttpsTarget: 6443
    type: ClusterIP
  serviceAccount:
    metricServer:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      name: keda-metrics-server
    operator:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      name: keda-operator
    webhooks:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      name: keda-webhook
  tolerations: []
  topologySpreadConstraints:
    metricsServer: []
    operator: []
    webhooks: []
  upgradeStrategy:
    metricsApiServer: {}
    operator: {}
    webhooks: {}
  volumes:
    keda:
      extraVolumeMounts: []
      extraVolumes: []
    metricsApiServer:
      extraVolumeMounts: []
      extraVolumes: []
    webhooks:
      extraVolumeMounts: []
      extraVolumes: []
  watchNamespace: ""
  webhooks:
    affinity: {}
    enabled: true
    failurePolicy: Ignore
    healthProbePort: 8081
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 25
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    name: keda-admission-webhooks
    port: ""
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 20
      periodSeconds: 3
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    revisionHistoryLimit: 10
    useHostNetwork: false
kube-prometheus-stack:
  alertmanager:
    enabled: false
  grafana:
    adminPassword: opencomply-grafana
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - disableDeletion: false
          editable: true
          folder: ""
          name: default
          options:
            path: /var/lib/grafana/dashboards/default
          orgId: 1
          type: file
    dashboards:
      default:
        es-sink:
          json: |
            {
              "annotations": {
                "list": [
                  {
                    "builtIn": 1,
                    "datasource": {
                      "type": "grafana",
                      "uid": "-- Grafana --"
                    },
                    "enable": true,
                    "hide": true,
                    "iconColor": "rgba(0, 211, 255, 1)",
                    "name": "Annotations & Alerts",
                    "type": "dashboard"
                  }
                ]
              },
              "editable": true,
              "fiscalYearStartMonth": 0,
              "graphTooltip": 0,
              "id": 1,
              "links": [],
              "panels": [
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "prometheus"
                  },
                  "fieldConfig": {
                    "defaults": {
                      "color": {
                        "mode": "palette-classic"
                      },
                      "custom": {
                        "axisBorderShow": false,
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "barWidthFactor": 0.6,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                          "legend": false,
                          "tooltip": false,
                          "viz": false
                        },
                        "insertNulls": false,
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                          "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                          "group": "A",
                          "mode": "none"
                        },
                        "thresholdsStyle": {
                          "mode": "off"
                        }
                      },
                      "mappings": [],
                      "thresholds": {
                        "mode": "absolute",
                        "steps": [
                          {
                            "color": "green",
                            "value": null
                          },
                          {
                            "color": "red",
                            "value": 80
                          }
                        ]
                      }
                    },
                    "overrides": []
                  },
                  "gridPos": {
                    "h": 7,
                    "w": 24,
                    "x": 0,
                    "y": 0
                  },
                  "id": 2,
                  "options": {
                    "legend": {
                      "calcs": [],
                      "displayMode": "list",
                      "placement": "bottom",
                      "showLegend": true
                    },
                    "tooltip": {
                      "mode": "single",
                      "sort": "none"
                    }
                  },
                  "pluginVersion": "11.4.0",
                  "targets": [
                    {
                      "editorMode": "code",
                      "expr": "rate(opengovernance_es_sink_docs_num_flushed[30s])",
                      "legendFormat": "__auto",
                      "range": true,
                      "refId": "A"
                    }
                  ],
                  "title": "Flush Rate",
                  "type": "timeseries"
                },
                {
                  "datasource": {
                    "type": "prometheus",
                    "uid": "prometheus"
                  },
                  "fieldConfig": {
                    "defaults": {
                      "color": {
                        "mode": "palette-classic"
                      },
                      "custom": {
                        "axisBorderShow": false,
                        "axisCenteredZero": false,
                        "axisColorMode": "text",
                        "axisLabel": "",
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "barWidthFactor": 0.6,
                        "drawStyle": "line",
                        "fillOpacity": 0,
                        "gradientMode": "none",
                        "hideFrom": {
                          "legend": false,
                          "tooltip": false,
                          "viz": false
                        },
                        "insertNulls": false,
                        "lineInterpolation": "linear",
                        "lineWidth": 1,
                        "pointSize": 5,
                        "scaleDistribution": {
                          "type": "linear"
                        },
                        "showPoints": "auto",
                        "spanNulls": false,
                        "stacking": {
                          "group": "A",
                          "mode": "none"
                        },
                        "thresholdsStyle": {
                          "mode": "off"
                        }
                      },
                      "mappings": [],
                      "thresholds": {
                        "mode": "absolute",
                        "steps": [
                          {
                            "color": "green",
                            "value": null
                          },
                          {
                            "color": "red",
                            "value": 80
                          }
                        ]
                      }
                    },
                    "overrides": []
                  },
                  "gridPos": {
                    "h": 8,
                    "w": 24,
                    "x": 0,
                    "y": 7
                  },
                  "id": 1,
                  "options": {
                    "legend": {
                      "calcs": [],
                      "displayMode": "list",
                      "placement": "bottom",
                      "showLegend": true
                    },
                    "tooltip": {
                      "mode": "single",
                      "sort": "none"
                    }
                  },
                  "pluginVersion": "11.4.0",
                  "targets": [
                    {
                      "datasource": {
                        "type": "prometheus",
                        "uid": "prometheus"
                      },
                      "editorMode": "code",
                      "expr": "opengovernance_es_sink_docs_num_added - opengovernance_es_sink_docs_num_flushed",
                      "legendFormat": "Num Unflushed",
                      "range": true,
                      "refId": "A"
                    }
                  ],
                  "title": "Num unflushed",
                  "type": "timeseries"
                }
              ],
              "preload": false,
              "schemaVersion": 40,
              "tags": [],
              "templating": {
                "list": []
              },
              "time": {
                "from": "now-6h",
                "to": "now"
              },
              "timepicker": {},
              "timezone": "browser",
              "title": "ES Sink",
              "uid": "aebtn21m9u70gd",
              "version": 1,
              "weekStart": ""
            }
  prometheus:
    prometheusSpec:
      storageSpec:
        volumeClaimTemplate:
          spec:
            resources:
              requests:
                storage: 10Gi
monitoringDebugMode: false
nats:
  config:
    cluster:
      enabled: false
      merge: {}
      noAdvertise: true
      patch: []
      port: 6222
      replicas: 1
      routeURLs:
        k8sClusterDomain: cluster.local
        password: null
        useFQDN: false
        user: null
      tls:
        cert: tls.crt
        dir: /etc/nats-certs/cluster
        enabled: false
        key: tls.key
        merge: {}
        patch: []
        secretName: null
    gateway:
      enabled: false
      merge: {}
      patch: []
      port: 7222
      tls:
        cert: tls.crt
        dir: /etc/nats-certs/gateway
        enabled: false
        key: tls.key
        merge: {}
        patch: []
        secretName: null
    jetstream:
      enabled: true
      fileStore:
        dir: /data
        enabled: true
        maxSize: null
        pvc:
          enabled: true
          merge: {}
          name: null
          patch: []
          size: 25Gi
          storageClassName: null
        storageDirectory: /data
      memoryStore:
        enabled: true
        maxSize: 4Gi
      merge: {}
      patch: []
    leafnodes:
      enabled: false
      merge: {}
      patch: []
      port: 7422
      tls:
        cert: tls.crt
        dir: /etc/nats-certs/leafnodes
        enabled: false
        key: tls.key
        merge: {}
        patch: []
        secretName: null
    merge: {}
    monitor:
      enabled: true
      port: 8222
      tls:
        enabled: false
    mqtt:
      enabled: false
      merge: {}
      patch: []
      port: 1883
      tls:
        cert: tls.crt
        dir: /etc/nats-certs/mqtt
        enabled: false
        key: tls.key
        merge: {}
        patch: []
        secretName: null
    nats:
      port: 4222
      tls:
        cert: tls.crt
        dir: /etc/nats-certs/nats
        enabled: false
        key: tls.key
        merge: {}
        patch: []
        secretName: null
    patch: []
    profiling:
      enabled: false
      port: 65432
    resolver:
      dir: /data/resolver
      enabled: false
      merge: {}
      patch: []
      pvc:
        enabled: true
        merge: {}
        name: null
        patch: []
        size: 1Gi
        storageClassName: null
    serverNamePrefix: ""
    websocket:
      enabled: false
      ingress:
        className: null
        enabled: false
        hosts: []
        merge: {}
        name: null
        patch: []
        path: /
        pathType: Exact
        tlsSecretName: null
      merge: {}
      patch: []
      port: 8080
      tls:
        cert: tls.crt
        dir: /etc/nats-certs/websocket
        enabled: false
        key: tls.key
        merge: {}
        patch: []
        secretName: null
  configMap:
    merge: {}
    name: null
    patch: []
  container:
    env: {}
    image:
      pullPolicy: null
      registry: null
      repository: nats
      tag: 2.10.18-alpine
    merge:
      resources:
        limits:
          cpu: 2500m
          memory: 6Gi
        requests:
          cpu: 200m
          memory: 3Gi
    patch: []
    ports:
      cluster: {}
      gateway: {}
      leafnodes: {}
      monitor: {}
      mqtt: {}
      nats: {}
      profiling: {}
      websocket: {}
  extraResources: []
  fullnameOverride: null
  global:
    debugMode: true
    domain: og.app.domain
    image:
      pullPolicy: null
      pullSecretNames: []
      registry: null
    labels:
      app: job-queue
    metricsService: disable
    size: lg
  headlessService:
    merge: {}
    name: null
    patch: []
  nameOverride: null
  namespaceOverride: null
  natsBox:
    container:
      env: {}
      image:
        pullPolicy: null
        registry: null
        repository: natsio/nats-box
        tag: 0.14.3
      merge: {}
      patch: []
    contentsSecret:
      merge: {}
      name: null
      patch: []
    contexts:
      default:
        creds:
          contents: null
          dir: null
          key: nats.creds
          secretName: null
        merge: {}
        nkey:
          contents: null
          dir: null
          key: nats.nk
          secretName: null
        patch: []
        tls:
          cert: tls.crt
          dir: null
          key: tls.key
          secretName: null
    contextsSecret:
      merge: {}
      name: null
      patch: []
    defaultContextName: default
    deployment:
      merge: {}
      name: null
      patch: []
    enabled: false
    podTemplate:
      merge: {}
      patch: []
    serviceAccount:
      enabled: false
      merge: {}
      name: null
      patch: []
  podDisruptionBudget:
    enabled: true
    merge: {}
    name: null
    patch: []
  podTemplate:
    configChecksumAnnotation: true
    merge: {}
    patch: []
    topologySpreadConstraints: {}
  promExporter:
    enabled: true
    env: {}
    image:
      pullPolicy: null
      registry: null
      repository: natsio/prometheus-nats-exporter
      tag: 0.15.0
    merge: {}
    patch: []
    podMonitor:
      enabled: false
      merge: {}
      name: null
      patch: []
    port: 7777
  reloader:
    enabled: true
    env: {}
    image:
      pullPolicy: null
      registry: null
      repository: natsio/nats-server-config-reloader
      tag: 0.15.0
    merge: {}
    natsVolumeMountPrefixes:
    - /etc/
    patch: []
  service:
    enabled: true
    merge: {}
    name: null
    patch: []
    ports:
      cluster:
        enabled: false
      gateway:
        enabled: false
      leafnodes:
        enabled: true
      monitor:
        enabled: false
      mqtt:
        enabled: true
      nats:
        enabled: true
      profiling:
        enabled: false
      websocket:
        enabled: true
  serviceAccount:
    enabled: false
    merge: {}
    name: null
    patch: []
  statefulSet:
    merge:
      metadata:
        annotations:
          karpenter.sh/do-not-disrupt: "true"
    name: null
    patch: []
  tlsCA:
    configMapName: null
    dir: /etc/nats-ca-cert
    enabled: false
    key: ca.crt
    secretName: null
opengovernance:
  compliance: true
  docker:
    registry: ghcr.io/opengovern
    tags:
      auth: v2.74.27
      checkupJob: v2.74.27
      compliance: v2.74.27
      complianceQuick: v2.74.27
      complianceReportJob: v2.74.27
      complianceSummarizerJob: v2.74.27
      core: v2.74.27
      demoImporterJob: v2.74.27
      esSink: v2.74.27
      integration: v2.74.27
      postInstallJob: v2.74.27
      psqlImport: v2.60.0
      queryRunnerJob: v2.74.27
      queryValidatorJob: v2.74.27
      schedulerService: v2.74.27
      swagger: v2.74.27
      tasks: v2.74.27
      webui: v2.74.26
  parallelism:
    complianceQuickJobMaxParallelism: 5
    complianceReportJobMaxParallelism: 10
    complianceReportLagThreshold: "50"
  replicaCount: 1
  vault:
    keyID: workspace-creds
opensearch:
  antiAffinity: soft
  antiAffinityTopologyKey: kubernetes.io/hostname
  clusterName: opensearch-cluster
  config:
    opensearch.yml: |
      cluster.name: opensearch-cluster
      network.host: 0.0.0.0
      indices.requests.cache.size: 10%
      plugins:
        security:
          ssl:
            transport:
              pemcert_filepath: esnode.pem
              pemkey_filepath: esnode-key.pem
              pemtrustedcas_filepath: root-ca.pem
              enforce_hostname_verification: false
            http:
              enabled: true
              pemcert_filepath: esnode.pem
              pemkey_filepath: esnode-key.pem
              pemtrustedcas_filepath: root-ca.pem
          allow_unsafe_democertificates: true
          allow_default_init_securityindex: true
          authcz:
            admin_dn:
              - CN=kirk,OU=client,O=client,L=test,C=de
          enable_snapshot_restore_privilege: true
          check_snapshot_restore_write_privileges: true
          restapi:
            roles_enabled: ["all_access", "security_rest_api_access"]
          system_indices:
            enabled: true
            indices:
              [
                ".opendistro-alerting-config",
                ".opendistro-alerting-alert*",
                ".opendistro-anomaly-results*",
                ".opendistro-anomaly-detector*",
                ".opendistro-anomaly-checkpoints",
                ".opendistro-anomaly-detection-state",
                ".opendistro-reports-*",
                ".opendistro-notifications-*",
                ".opendistro-notebooks",
                ".opendistro-asynchronous-search-response*",
              ]
  customAntiAffinity: {}
  enableServiceLinks: true
  enabled: true
  envFrom: []
  extraContainers: []
  extraEnvs:
  - name: OPENSEARCH_INITIAL_ADMIN_PASSWORD
    value: myStrongPassword@123!
  - name: AWS_REGION
    value: us-east-2
  extraInitContainers: []
  extraObjects: []
  extraVolumeMounts: []
  extraVolumes: []
  fsGroup: ""
  fullnameOverride: ""
  global:
    debugMode: true
    dockerRegistry: ""
    domain: og.app.domain
    metricsService: disable
    size: lg
  hostAliases: []
  httpHostPort: ""
  httpPort: 9200
  image:
    pullPolicy: IfNotPresent
    repository: opensearchproject/opensearch
    tag: ""
  imagePullSecrets: []
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - chart-example.local
    ingressLabels: {}
    path: /
    tls: []
  initResources: {}
  keystore: []
  labels: {}
  lifecycle: {}
  livenessProbe: {}
  majorVersion: ""
  masterService: opensearch-cluster-master
  masterTerminationFix: false
  maxUnavailable: 1
  metricsPort: 9600
  nameOverride: ""
  networkHost: 0.0.0.0
  networkPolicy:
    create: false
    http:
      enabled: false
  nodeAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - preference:
        matchExpressions:
        - key: opencomply-node
          operator: In
          values:
          - opensearch
      weight: 1
  nodeGroup: master
  nodeSelector: {}
  openSearchAnnotations: {}
  opensearchHome: /usr/share/opensearch
  opensearchJavaOpts: -Xms3072M -Xmx3072M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/share/opensearch/heap-dump.hprof
  opensearchLifecycle: {}
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enableInitChown: true
    enabled: true
    labels:
      enabled: false
    size: 25Gi
  plugins:
    enabled: false
    installList: []
  podAffinity: {}
  podAnnotations: {}
  podManagementPolicy: Parallel
  podSecurityContext:
    fsGroup: 1000
    runAsUser: 1000
  podSecurityPolicy:
    create: false
    name: ""
    spec:
      fsGroup:
        rule: RunAsAny
      privileged: true
      runAsUser:
        rule: RunAsAny
      seLinux:
        rule: RunAsAny
      supplementalGroups:
        rule: RunAsAny
      volumes:
      - secret
      - configMap
      - persistentVolumeClaim
      - emptyDir
  priorityClassName: ""
  protocol: https
  rbac:
    automountServiceAccountToken: false
    create: false
    serviceAccountAnnotations: {}
    serviceAccountName: ""
  readinessProbe:
    failureThreshold: 3
    periodSeconds: 5
    tcpSocket:
      port: 9200
    timeoutSeconds: 3
  replicas: 1
  resources:
    limits:
      cpu: 500m
      memory: 7000Mi
    requests:
      cpu: 500m
      memory: 4000Mi
  roles:
  - master
  - ingest
  - data
  - remote_cluster_client
  schedulerName: ""
  secretMounts: []
  securityConfig:
    actionGroupsSecret: null
    config:
      data: {}
      dataComplete: true
      securityConfigSecret: ""
    configSecret: null
    enabled: true
    internalUsersSecret: null
    path: /usr/share/opensearch/config/opensearch-security
    rolesMappingSecret: null
    rolesSecret: null
    tenantsSecret: null
  securityContext:
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
    runAsUser: 1000
  service:
    annotations: {}
    externalTrafficPolicy: ""
    headless:
      annotations: {}
    httpPortName: http
    labels: {}
    labelsHeadless: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    metricsPortName: metrics
    nodePort: ""
    transportPortName: transport
    type: ClusterIP
  sidecarResources: {}
  singleNode: false
  startupProbe:
    failureThreshold: 30
    initialDelaySeconds: 5
    periodSeconds: 10
    tcpSocket:
      port: 9200
    timeoutSeconds: 3
  sysctl:
    enabled: false
  sysctlInit:
    enabled: true
  sysctlVmMaxMapCount: 262144
  terminationGracePeriod: 120
  tolerations: []
  topologySpreadConstraints: []
  transportHostPort: ""
  transportPort: 9300
  updateStrategy: RollingUpdate
opensearch-dashboards:
  enabled: false
  replicaCount: 1
  resources:
    limits:
      cpu: 200m
      memory: 500Mi
    requests:
      cpu: 200m
      memory: 500Mi
populateWithSampleData:
  enabled: false
  fileURL: https://demo-data.opencomply.io/v2/demo_data.tar.gz.enc
postgresql:
  architecture: replication
  audit:
    clientMinMessages: error
    logConnections: false
    logDisconnections: false
    logHostname: false
    logLinePrefix: ""
    logTimezone: ""
    pgAuditLog: ""
    pgAuditLogCatalog: "off"
  auth:
    database: ""
    enablePostgresUser: true
    existingSecret: postgres-secret
    password: ""
    postgresPassword: ""
    replicationPassword: ""
    replicationUsername: repl_user
    secretKeys:
      adminPasswordKey: postgres-password
      replicationPasswordKey: replication-password
      userPasswordKey: password
    usePasswordFiles: false
    username: ""
  backup:
    cronjob:
      annotations: {}
      command:
      - /bin/sh
      - -c
      - pg_dumpall --clean --if-exists --load-via-partition-root --quote-all-identifiers
        --no-password --file=${PGDUMP_DIR}/pg_dumpall-$(date '+%Y-%m-%d-%H-%M').pgdump
      concurrencyPolicy: Allow
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        enabled: true
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions: {}
        seccompProfile:
          type: RuntimeDefault
      extraVolumeMounts: []
      extraVolumes: []
      failedJobsHistoryLimit: 1
      labels: {}
      networkPolicy:
        enabled: true
      nodeSelector: {}
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      resources: {}
      resourcesPreset: nano
      restartPolicy: OnFailure
      schedule: '@daily'
      startingDeadlineSeconds: ""
      storage:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: true
        existingClaim: ""
        mountPath: /backup/pgdump
        resourcePolicy: ""
        size: 8Gi
        storageClass: ""
        subPath: ""
        volumeClaimTemplates:
          selector: {}
      successfulJobsHistoryLimit: 3
      timeZone: ""
      tolerations: []
      ttlSecondsAfterFinished: ""
    enabled: false
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      compatibility:
        openshift:
          adaptSecurityContext: auto
      debugMode: true
      defaultStorageClass: ""
      domain: og.app.domain
      imagePullSecrets: []
      imageRegistry: ""
      metricsService: disable
      postgresql:
        auth:
          database: ""
          existingSecret: ""
          password: ""
          postgresPassword: ""
          secretKeys:
            adminPasswordKey: ""
            replicationPasswordKey: ""
            userPasswordKey: ""
          username: ""
        service:
          ports:
            postgresql: ""
      size: lg
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  containerPorts:
    postgresql: 5432
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  extraDeploy: []
  fullnameOverride: ""
  global:
    compatibility:
      openshift:
        adaptSecurityContext: auto
    debugMode: true
    defaultStorageClass: ""
    domain: og.app.domain
    imagePullSecrets: []
    imageRegistry: ""
    metricsService: disable
    postgresql:
      auth:
        database: ""
        existingSecret: ""
        password: ""
        postgresPassword: ""
        secretKeys:
          adminPasswordKey: ""
          replicationPasswordKey: ""
          userPasswordKey: ""
        username: ""
      service:
        ports:
          postgresql: ""
    size: lg
    storageClass: ""
  image:
    debug: false
    digest: ""
    pullPolicy: Always
    pullSecrets: []
    registry: ghcr.io
    repository: opengovern/postgres
    tag: v2.60.0
  kubeVersion: ""
  ldap:
    basedn: ""
    binddn: ""
    bindpw: ""
    enabled: false
    port: ""
    prefix: ""
    scheme: ""
    searchAttribute: ""
    searchFilter: ""
    server: ""
    suffix: ""
    tls:
      enabled: false
    uri: ""
  metrics:
    collectors: {}
    containerPorts:
      metrics: 9187
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customMetrics: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraEnvVars: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.15.0-debian-12-r39
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    prometheusRule:
      enabled: false
      labels: {}
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources: {}
    resourcesPreset: nano
    service:
      annotations:
        prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
        prometheus.io/scrape: "true"
      clusterIP: ""
      ports:
        metrics: 9187
      sessionAffinity: None
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  nameOverride: ""
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlSharedPreloadLibraries: pgaudit
  primary:
    affinity: {}
    annotations: {}
    args: []
    automountServiceAccountToken: false
    command: []
    configuration: |
      listen_addresses = '*'
      max_wal_senders = 10
      shared_preload_libraries = 'pg_stat_statements'

      max_connections = 100
      shared_buffers = 768MB
      effective_cache_size = 2304MB
      maintenance_work_mem = 384MB
      checkpoint_completion_target = 0.9
      wal_buffers = 16MB
      default_statistics_target = 500
      random_page_cost = 1.1
      effective_io_concurrency = 200
      work_mem = 4915kB
      huge_pages = off
      min_wal_size = 4GB
      max_wal_size = 16GB
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    existingExtendedConfigmap: ""
    extendedConfiguration: ""
    extraEnvVars:
    - name: POSTGRES_WORKSPACE_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: workspaceServiceUserPassword
          name: postgres-secret
    - name: POSTGRES_AUTH_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: authServiceUserPassword
          name: postgres-secret
    - name: POSTGRES_SUBSCRIPTION_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: subscriptionUserPassword
          name: postgres-secret
    - name: POSTGRES_INFORMATION_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: informationUserPassword
          name: postgres-secret
    - name: DEX_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: dexServiceUserPassword
          name: postgres-secret
    - name: POSTGRES_DESCRIBE_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: schedulerUserPassword
          name: postgres-secret
    - name: POSTGRES_POLICY_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: policyServiceUserPassword
          name: postgres-secret
    - name: POSTGRES_ASSISTANT_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: assistantServiceUserPassword
          name: postgres-secret
    - name: POSTGRES_COMPLIANCE_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: complianceServiceUserPassword
          name: postgres-secret
    - name: POSTGRES_CORE_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: coreServiceUserPassword
          name: postgres-secret
    - name: POSTGRES_REPORTER_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: reporterServiceUserPassword
          name: postgres-secret
    - name: POSTGRES_MIGRATOR_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: migratorServiceUserPassword
          name: postgres-secret
    - name: POSTGRES_EXPORTER_PASSWORD
      valueFrom:
        secretKeyRef:
          key: postgresExporterUserPassword
          name: postgres-secret
    - name: POSTGRES_STEAMPIPE_USER_PASSWORD
      valueFrom:
        secretKeyRef:
          key: steampipeUserPassword
          name: postgres-secret
    - name: POSTGRES_ALERTING_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: alertingServiceUserPassword
          name: postgres-secret
    - name: POSTGRES_INTEGRATION_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: integrationServiceUserPassword
          name: postgres-secret
    - name: POSTGRES_TASK_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: taskServiceUserPassword
          name: postgres-secret
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    initdb:
      args: ""
      password: ""
      postgresqlWalDir: ""
      scripts:
        primary_init_script.sh: |
          #!/bin/bash
          ./init.sh
      scriptsConfigMap: ""
      scriptsSecret: ""
      user: postgres
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: primary
    networkPolicy:
      allowExternal: true
      allowExternalEgress: true
      enabled: true
      extraEgress: []
      extraIngress: []
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: true
      maxUnavailable: ""
      minAvailable: ""
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/postgresql
      selector: {}
      size: 10Gi
      storageClass: ""
      subPath: ""
      volumeName: data
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenDeleted: Retain
      whenScaled: Retain
    pgHbaConfiguration: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    preInitDb:
      scripts: {}
      scriptsConfigMap: ""
      scriptsSecret: ""
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits:
        cpu: "4"
        memory: 8Gi
      requests:
        cpu: "2"
        memory: 2Gi
    resourcesPreset: nano
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
      loadBalancerClass: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    standby:
      enabled: false
      primaryHost: ""
      primaryPort: ""
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  psp:
    create: false
  rbac:
    create: false
    rules: []
  readReplicas:
    affinity: {}
    annotations: {}
    args: []
    automountServiceAccountToken: false
    command: []
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extendedConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: read
    networkPolicy:
      allowExternal: true
      allowExternalEgress: true
      enabled: true
      extraEgress: []
      extraIngress: []
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: true
      maxUnavailable: ""
      minAvailable: ""
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenDeleted: Retain
      whenScaled: Retain
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 0
    resources: {}
    resourcesPreset: nano
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
      loadBalancerClass: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  replication:
    applicationName: my_application
    numSynchronousReplicas: 0
    synchronousCommit: "off"
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    create: true
    name: ""
  serviceBindings:
    enabled: false
  shmVolume:
    enabled: true
    sizeLimit: ""
  tls:
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    crlFilename: ""
    enabled: false
    preferServerCiphers: true
  volumePermissions:
    containerSecurityContext:
      runAsGroup: 0
      runAsNonRoot: false
      runAsUser: 0
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/os-shell
      tag: 12-debian-12-r27
    resources: {}
    resourcesPreset: nano
queryvalidator:
  enabled: false
swagger:
  enabled: false
vault:
  csi:
    agent:
      enabled: true
      extraArgs: []
      image:
        pullPolicy: IfNotPresent
        repository: hashicorp/vault
        tag: 1.17.2
      logFormat: standard
      logLevel: info
      resources: {}
    daemonSet:
      annotations: {}
      extraLabels: {}
      kubeletRootDir: /var/lib/kubelet
      providersDir: /etc/kubernetes/secrets-store-csi-providers
      securityContext:
        container: {}
        pod: {}
      updateStrategy:
        maxUnavailable: ""
        type: RollingUpdate
    debug: false
    enabled: false
    extraArgs: []
    hmacSecretName: ""
    image:
      pullPolicy: IfNotPresent
      repository: hashicorp/vault-csi-provider
      tag: 1.4.3
    livenessProbe:
      failureThreshold: 2
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 3
    pod:
      affinity: {}
      annotations: {}
      extraLabels: {}
      nodeSelector: {}
      tolerations: []
    priorityClassName: ""
    readinessProbe:
      failureThreshold: 2
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 3
    resources: {}
    serviceAccount:
      annotations: {}
      extraLabels: {}
    volumeMounts: null
    volumes: null
  global:
    debugMode: true
    domain: og.app.domain
    enabled: true
    externalVaultAddr: ""
    imagePullSecrets: []
    metricsService: disable
    namespace: ""
    openshift: false
    psp:
      annotations: |
        seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default,runtime/default
        apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
        seccomp.security.alpha.kubernetes.io/defaultProfileName:  runtime/default
        apparmor.security.beta.kubernetes.io/defaultProfileName:  runtime/default
      enable: false
    serverTelemetry:
      prometheusOperator: false
    size: lg
    tlsDisable: true
  injector:
    affinity: |
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: {{ template "vault.name" . }}-agent-injector
                app.kubernetes.io/instance: "{{ .Release.Name }}"
                component: webhook
            topologyKey: kubernetes.io/hostname
    agentDefaults:
      cpuLimit: 500m
      cpuRequest: 250m
      memLimit: 128Mi
      memRequest: 64Mi
      template: map
      templateConfig:
        exitOnRetryFailure: true
        staticSecretRenderInterval: ""
    agentImage:
      repository: hashicorp/vault
      tag: 1.17.2
    annotations: {}
    authPath: auth/kubernetes
    certs:
      caBundle: ""
      certName: tls.crt
      keyName: tls.key
      secretName: null
    enabled: '-'
    externalVaultAddr: ""
    extraEnvironmentVars: {}
    extraLabels: {}
    failurePolicy: Ignore
    hostNetwork: false
    image:
      pullPolicy: IfNotPresent
      repository: hashicorp/vault-k8s
      tag: 1.4.2
    leaderElector:
      enabled: true
    livenessProbe:
      failureThreshold: 2
      initialDelaySeconds: 5
      periodSeconds: 2
      successThreshold: 1
      timeoutSeconds: 5
    logFormat: standard
    logLevel: info
    metrics:
      enabled: false
    namespaceSelector: {}
    nodeSelector: {}
    objectSelector: {}
    podDisruptionBudget: {}
    port: 8080
    priorityClassName: ""
    readinessProbe:
      failureThreshold: 2
      initialDelaySeconds: 5
      periodSeconds: 2
      successThreshold: 1
      timeoutSeconds: 5
    replicas: 1
    resources: {}
    revokeOnShutdown: false
    securityContext:
      container: {}
      pod: {}
    service:
      annotations: {}
    serviceAccount:
      annotations: {}
    startupProbe:
      failureThreshold: 12
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    strategy: {}
    tolerations: []
    topologySpreadConstraints: []
    webhook:
      annotations: {}
      failurePolicy: Ignore
      matchPolicy: Exact
      namespaceSelector: {}
      objectSelector: |
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: NotIn
          values:
          - {{ template "vault.name" . }}-agent-injector
      timeoutSeconds: 30
    webhookAnnotations: {}
  server:
    affinity: |
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: {{ template "vault.name" . }}
                app.kubernetes.io/instance: "{{ .Release.Name }}"
                component: server
            topologyKey: kubernetes.io/hostname
    annotations: {}
    auditStorage:
      accessMode: ReadWriteOnce
      annotations: {}
      enabled: false
      labels: {}
      mountPath: /vault/audit
      size: 10Gi
      storageClass: null
    authDelegator:
      enabled: true
    configAnnotation: false
    dataStorage:
      accessMode: ReadWriteOnce
      annotations: {}
      enabled: true
      labels: {}
      mountPath: /vault/data
      size: 10Gi
      storageClass: null
    dev:
      devRootToken: root
      enabled: false
    enabled: '-'
    enterpriseLicense:
      secretKey: license
      secretName: ""
    extraArgs: ""
    extraContainers: null
    extraEnvironmentVars: {}
    extraInitContainers: null
    extraLabels: {}
    extraPorts: null
    extraSecretEnvironmentVars: []
    extraVolumes: []
    ha:
      apiAddr: null
      clusterAddr: null
      config: |
        ui = true

        listener "tcp" {
          tls_disable = 1
          address = "[::]:8200"
          cluster_address = "[::]:8201"
        }
        storage "consul" {
          path = "vault"
          address = "HOST_IP:8500"
        }

        service_registration "kubernetes" {}

        # Example configuration for using auto-unseal, using Google Cloud KMS. The
        # GKMS keys must already exist, and the cluster must have a service account
        # that is authorized to access GCP KMS.
        #seal "gcpckms" {
        #   project     = "vault-helm-dev-246514"
        #   region      = "global"
        #   key_ring    = "vault-helm-unseal-kr"
        #   crypto_key  = "vault-helm-unseal-key"
        #}

        # Example configuration for enabling Prometheus metrics.
        # If you are using Prometheus Operator you can enable a ServiceMonitor resource below.
        # You may wish to enable unauthenticated metrics in the listener block above.
        #telemetry {
        #  prometheus_retention_time = "30s"
        #  disable_hostname = true
        #}
      disruptionBudget:
        enabled: true
        maxUnavailable: null
      enabled: false
      raft:
        config: |
          ui = true

          listener "tcp" {
            tls_disable = 1
            address = "[::]:8200"
            cluster_address = "[::]:8201"
            # Enable unauthenticated metrics access (necessary for Prometheus Operator)
            #telemetry {
            #  unauthenticated_metrics_access = "true"
            #}
          }

          storage "raft" {
            path = "/vault/data"
          }

          service_registration "kubernetes" {}
        enabled: false
        setNodeId: false
      replicas: 3
    hostAliases: []
    hostNetwork: false
    image:
      pullPolicy: IfNotPresent
      repository: hashicorp/vault
      tag: 1.17.2
    ingress:
      activeService: true
      annotations: {}
      enabled: false
      extraPaths: []
      hosts:
      - host: chart-example.local
        paths: []
      ingressClassName: ""
      labels: {}
      pathType: Prefix
      tls: []
    livenessProbe:
      enabled: false
      execCommand: []
      failureThreshold: 2
      initialDelaySeconds: 60
      path: /v1/sys/health?standbyok=true
      periodSeconds: 5
      port: 8200
      successThreshold: 1
      timeoutSeconds: 3
    logFormat: ""
    logLevel: ""
    networkPolicy:
      egress: []
      enabled: false
      ingress:
      - from:
        - namespaceSelector: {}
        ports:
        - port: 8200
          protocol: TCP
        - port: 8201
          protocol: TCP
    nodeSelector: {}
    persistentVolumeClaimRetentionPolicy: {}
    postStart: []
    preStopSleepSeconds: 5
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 2
      initialDelaySeconds: 5
      periodSeconds: 5
      port: 8200
      successThreshold: 1
      timeoutSeconds: 3
    resources: {}
    route:
      activeService: true
      annotations: {}
      enabled: false
      host: chart-example.local
      labels: {}
      tls:
        termination: passthrough
    service:
      active:
        annotations: {}
        enabled: true
      annotations: {}
      enabled: true
      externalTrafficPolicy: Cluster
      instanceSelector:
        enabled: true
      ipFamilies: []
      ipFamilyPolicy: ""
      port: 8200
      publishNotReadyAddresses: true
      standby:
        annotations: {}
        enabled: true
      targetPort: 8200
    serviceAccount:
      annotations: {}
      create: true
      createSecret: false
      extraLabels: {}
      name: ""
      serviceDiscovery:
        enabled: true
    shareProcessNamespace: false
    standalone:
      config: |
        ui = true

        listener "tcp" {
          tls_disable = 1
          address = "[::]:8200"
          cluster_address = "[::]:8201"
          # Enable unauthenticated metrics access (necessary for Prometheus Operator)
          #telemetry {
          #  unauthenticated_metrics_access = "true"
          #}
        }
        storage "file" {
          path = "/vault/data"
        }

        # Example configuration for using auto-unseal, using Google Cloud KMS. The
        # GKMS keys must already exist, and the cluster must have a service account
        # that is authorized to access GCP KMS.
        #seal "gcpckms" {
        #   project     = "vault-helm-dev"
        #   region      = "global"
        #   key_ring    = "vault-helm-unseal-kr"
        #   crypto_key  = "vault-helm-unseal-key"
        #}

        # Example configuration for enabling Prometheus metrics in your config.
        #telemetry {
        #  prometheus_retention_time = "30s"
        #  disable_hostname = true
        #}
      enabled: '-'
    statefulSet:
      annotations: {}
      securityContext:
        container: {}
        pod: {}
    terminationGracePeriodSeconds: 10
    tolerations: []
    topologySpreadConstraints: []
    updateStrategyType: OnDelete
    volumeMounts: null
    volumes: null
  serverTelemetry:
    prometheusRules:
      enabled: false
      rules: []
      selectors: {}
    serviceMonitor:
      authorization: {}
      enabled: false
      interval: 30s
      scrapeTimeout: 10s
      selectors: {}
      tlsConfig: {}
  ui:
    activeVaultPodOnly: false
    annotations: {}
    enabled: false
    externalPort: 8200
    externalTrafficPolicy: Cluster
    publishNotReadyAddresses: true
    serviceIPFamilies: []
    serviceIPFamilyPolicy: ""
    serviceNodePort: null
    serviceType: ClusterIP
    targetPort: 8200
vault-helm: {}
