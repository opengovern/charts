---
apiVersion: v1
kind: Secret
metadata:
  name: auth-service-secret
  namespace: {{ .Release.Namespace }}
  annotations:
    kubernetes.io/service-account.name: auth-service
type: kubernetes.io/service-account-token
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: {{ .Release.Namespace }}
  labels:
    app: auth-service
spec:
  minReadySeconds: 10
  replicas: 2 # You have this set to 2 in the original spec
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      serviceAccountName: auth-service
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                  - key: opencomply-node
                    operator: In
                    values:
                      - app

      # ============================================================
      # BEGIN Init Container to wait for PostgreSQL (Compatibility)
      # ============================================================
      initContainers:
        - name: wait-for-postgres
          # Use an image containing pg_isready, matching your DB version is best
          image: postgres:15.5 # Adjust tag if needed
          # Use environment variables to pass Helm template results to the shell command
          env:
            - name: PG_HOST
              value: "{{ include "postgres.endpoint" . }}" # Use same helper as main container
            - name: PG_PORT
              value: "{{ include "postgres.port" . }}"   # Use same helper as main container
            # Provide PGPASSWORD for the 'postgres' user check
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret       # Secret holding DB passwords
                  key: postgres-password     # Key for 'postgres' user password
          command: ['sh', '-c']
          args:
            - |
              echo "InitContainer: Waiting for PostgreSQL host ${PG_HOST}:${PG_PORT}..."
              # Loop until pg_isready succeeds, using env vars for host/port
              until pg_isready -h ${PG_HOST} -p ${PG_PORT} -U postgres -q -t 2; do
                echo "InitContainer: PostgreSQL unavailable - sleeping 2s"
                sleep 2
              done
              echo "InitContainer: PostgreSQL is ready!"
          resources: # Optional: Define resources for the init container
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 50Mi
      # ============================================================
      # END Init Container
      # ============================================================

      containers:
        - name: auth-service
          image: "{{ .Values.opengovernance.docker.registry }}/auth-service:{{ .Values.opengovernance.docker.tags.auth }}"
          command: [ "/auth-service" ]
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests:
              cpu: 500m
              memory: 100Mi
          env:
            - name: PLATFORM_HOST
              value: {{ .Values.global.domain }}
            - name: POSTGRESQL_HOST
              value: "{{ include "postgres.endpoint" . }}" # Uses helper
            - name: POSTGRESQL_PORT
              value: "{{ include "postgres.port" . }}"   # Uses helper
            - name: POSTGRESQL_DB
              value: "auth"
            - name: POSTGRESQL_USERNAME
              value: "auth_service"
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: authServiceUserPassword # Correct password for app's user
            - name: POSTGRESQL_SSLMODE
              value: "{{ include "postgres.sslMode" . }}"
            - name: HTTP_ADDRESS
              value: "0.0.0.0:8251"
            - name: GRPC_ADDRESS
              value: "0.0.0.0:50051"
            - name: INVITE_LINK_TEMPLATE
              value: "https://{{ .Values.global.domain }}/invitation?id=%s"
            - name: AUTH0_INVITE_TTL
              value: "21600"
            - name: AUTH0_MANAGE_DOMAIN
              value: "https://kaytu.us.auth0.com" # These AUTH0 vars seem unrelated but are kept
            - name: AUTH0_DOMAIN
              value: "https://kaytu.us.auth0.com/" # Kept
            - name: DEX_AUTH_DOMAIN
              value: "http://{{ .Release.Name }}-dex.{{ .Release.Namespace }}.svc.cluster.local:5556/dex"
            - name: DEX_AUTH_PUBLIC_CLIENT_ID
              value: public-client
            - name: PLATFORM_KEY_ENABLED
              value: "false"
            - name: PLATFORM_PUBLIC_KEY
              value: ""
            - name: PLATFORM_PRIVATE_KEY
              value: ""
            - name: GRPC_TLS_CERT_PATH
              value: /etc/certs/tls.crt
            - name: GRPC_TLS_KEY_PATH
              value: /etc/certs/tls.key
            - name: GRPC_TLS_CA_PATH
              value: /etc/certs/ca.crt
            - name: COMPLIANCE_BASE_URL
              value: "http://compliance-service.{{ .Release.Namespace }}.svc.cluster.local:7251"
            - name: INTEGRATION_BASE_URL
              value: "http://integration-service.{{ .Release.Namespace }}.svc.cluster.local:8000"
            - name: DESCRIBE_BASE_URL
              value: "http://scheduler.{{ .Release.Namespace }}.svc.cluster.local:5251"
            - name: CORE_BASE_URL
              value: "http://core-service.{{ .Release.Namespace }}.svc.cluster.local:6251"
            - name: DEX_GRPC_ADDR
              value: "{{ .Release.Name }}-dex.{{ .Release.Namespace }}.svc.cluster.local:5557"
            - name: WORKSPACE_NAME
              value: "main"
            - name: DEX_CALLBACK_URL
              value: "https://{{ .Values.global.domain }}/dex/callback,http://{{ .Values.global.domain }}/dex/callback,http://localhost:3000/dex/callback,http://localhost:8080/dex/callback"
            - name: NAMESPACE
              value: "{{ .Release.Namespace }}"
            - name: DEX_PUBLIC_CLIENT_REDIRECT_URIS
              value: "https://{{ .Values.global.domain }}/callback,http://{{ .Values.global.domain }}/callback,http://localhost:3000/callback,http://localhost:8080/callback"
            - name: DEX_PRIVATE_CLIENT_REDIRECT_URIS
              value: "https://{{ .Values.global.domain }}/callback"