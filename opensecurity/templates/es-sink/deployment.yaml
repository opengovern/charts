apiVersion: apps/v1
kind: Deployment
metadata:
  name: es-sink-service
  namespace: {{ .Release.Namespace }}
  labels:
    app: es-sink-service
spec:
  minReadySeconds: 10
  # Use replicaCount from values, assuming it exists under opensecurity
  replicas: {{ .Values.opensecurity.replicaCount | default 1 }}
  selector:
    matchLabels:
      app: es-sink-service
  template:
    metadata:
      labels:
        app: es-sink-service
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                  - key: opencomply-node
                    operator: In
                    values:
                      - app

      # <<< BEGIN: initContainers Block >>>
      initContainers:
        - name: wait-for-elasticsearch
          image: curlimages/curl:8.5.0
          env:
            - name: ES_URL
              value: "https://opensearch-cluster-master.{{ .Release.Namespace }}.svc.cluster.local:9200"
            - name: ES_USER
              value: "admin"
            - name: ES_PASS
              value: "myStrongPassword@123!"
          command: ["sh","-xc"]
          args:
            - |
              echo "InitContainer (es-sink): Waiting for Elasticsearch at ${ES_URL}…"
              retries={{ .Values.opensecurity.initRetryCount }}
              delay={{ .Values.opensecurity.initRetryDelay }}
              count=0
              until curl -k -u "${ES_USER}:${ES_PASS}" -sf "${ES_URL}/_cluster/health" -o /dev/null; do
                count=$((count+1))
                if [ "$count" -ge "$retries" ]; then
                  echo "InitContainer (es-sink): Elasticsearch still unreachable after ${retries} retries – exiting."
                  exit 1
                fi
                echo "InitContainer (es-sink): Sleeping ${delay}s (attempt ${count}/${retries})…"
                sleep "${delay}"
              done
              echo "InitContainer (es-sink): Elasticsearch is healthy!"


      containers:
        - name: es-sink-service
          image: "{{ .Values.opensecurity.docker.registry }}/es-sink:{{ .Values.opensecurity.docker.tags.esSink }}"
          command: ["/es-sink-service"]
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 200m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 100Mi
          env:
            - name: ESSINK_HTTP__ADDRESS
              value: "0.0.0.0:8000"

            - name: ESSINK_GRPC__ADDRESS
              value: "0.0.0.0:5252"
            - name: ESSINK_GRPC__AUTH_URI
              # Use helper for service name if available, otherwise construct
              value: "{{ include "opensecurity.fullname" . }}-auth-service.{{ .Release.Namespace }}.svc.cluster.local:50051"

            - name: ESSINK_ELASTICSEARCH__ADDRESS
              value: "https://opensearch-cluster-master.{{ .Release.Namespace }}.svc.cluster.local:9200"
            - name: ESSINK_ELASTICSEARCH__IS_OPEN_SEARCH
              value: "true"
            - name: ESSINK_ELASTICSEARCH__IS_ON_AKS
              value: "true"
            - name: ESSINK_ELASTICSEARCH__USERNAME
              value: "admin"
            - name: ESSINK_ELASTICSEARCH__PASSWORD
              value: "myStrongPassword@123!"
            - name: ESSINK_NATS__URL
              value: "{{ .Release.Name }}-nats.{{ .Release.Namespace }}.svc.cluster.local:4222"

