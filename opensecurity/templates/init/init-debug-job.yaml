{{- /* templates/init/debug-job.yaml */}}
{{- /* This template is for manual debugging ONLY. */}}
{{- /* It creates a standard Job, NOT a Helm hook. */}}
{{- /* Render using: helm template ... -s templates/init/debug-job.yaml --set opensecurity.initJob.debugTag=YOUR_TAG | kubectl apply -f - */}}

{{- /* Only render if a debugTag is provided via --set */}}
{{- if .Values.opensecurity.initJob.debugTag }}
apiVersion: batch/v1
kind: Job
metadata:
  # Create a unique name for the debug job, maybe include the tag
  name: {{ include "opensecurity.fullname" . }}-init-job-debug-{{ randAlphaNum 5 | lower }}
  # Use the standard namespace
  namespace: "{{ .Release.Namespace }}"
  labels:
    # Use standard labels from the helper
    {{- include "opensecurity.labels" . | nindent 4 }}
    # Add specific debug labels
    app.kubernetes.io/component: init-job-debug
    debug-session: {{ randAlphaNum 10 | lower }} # Unique identifier for this debug run
  # NO HELM HOOK ANNOTATIONS
spec:
  # Set backoff limit directly from values using the correct path
  backoffLimit: {{ .Values.opensecurity.initJob.backoffLimit | default 0 }} # Default to 0 retries for faster debug feedback
  template:
    spec:
      # Keep restart policy suitable for jobs
      restartPolicy: Never # Often better for debugging to see the exact error
      # Specify service account name directly from values using the correct path (added default)
      serviceAccountName: {{ .Values.opensecurity.initJob.serviceAccountName | default "default" }}
      containers:
        - name: integration-service-debug # Differentiate container name
          # Use the image path and the specific debugTag passed via --set
          image: "{{ .Values.opensecurity.docker.registry }}/opensecurity-init-job:{{ .Values.opensecurity.initJob.debugTag }}"
          # Keep imagePullPolicy or set to Always for debugging
          imagePullPolicy: Always
          # Keep command
          command: ["/app/app-init-job"]
          # Define environment variables for the container using the correct path
          env:
            {{- /* Iterate over simple key-value env vars from values */}}
            {{- range .Values.opensecurity.initJob.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            {{- /* Iterate over env vars sourced from secrets from values */}}
            {{- range .Values.opensecurity.initJob.envFromSecret }}
            - name: {{ .name }}
              valueFrom:
                secretKeyRef:
                  name: {{ .secretName }}
                  key: {{ .secretKey }}
            {{- end }}
            {{- /* Iterate over env vars sourced from config maps from values */}}
            {{- range .Values.opensecurity.initJob.envFromConfigMap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  # Name of the ConfigMap to source from
                  name: {{ .configMapName }}
                  # Key within the ConfigMap whose value will be used
                  key: {{ .configMapKey }}
                  # Add optional flag if needed
                  {{- if .optional }}
                  optional: {{ .optional }}
                  {{- end }}
            {{- end }}
          # Keep resources definition
          resources:
            limits:
              cpu: 500m
              memory: 4000Mi
            requests:
              cpu: 100m
              memory: 2000Mi
{{- end }} # End of if .Values.opensecurity.initJob.debugTag
