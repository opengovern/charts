# /Users/anil/workspace/charts/opensecurity/charts/dex/templates/deployment.yaml
# MODIFIED to include an initContainer to wait for PostgreSQL readiness.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dex.fullname" . }}
  labels:
    {{- include "dex.labels" . | nindent 4 }}
    {{ with .Values.deploymentLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{ with .Values.deploymentAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  {{- with .Values.strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "dex.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{ if .Values.configSecret.create }}
        checksum/config: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      {{- end }}
      labels:
        {{- include "dex.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "dex.serviceAccountName" . }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . | quote }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      # ===== BEGIN Wait for PostgreSQL Init Container =====
      # This init container ensures PostgreSQL is ready before Dex starts.
      initContainers:
        - name: wait-for-postgres-dex
          # Use a PostgreSQL client image. Match major version if possible.
          image: postgres:15.5 # Or adjust tag as needed
          env:
            # Construct the PostgreSQL service hostname using the parent chart's release context.
            # Assumes the PostgreSQL service follows the pattern '<release-name>-postgresql'.
            - name: PG_HOST
              value: {{ printf "%s-postgresql.%s.svc.cluster.local" .Release.Name .Release.Namespace }}
            # Default PostgreSQL port.
            - name: PG_PORT
              value: "5432"
            # Password for the 'postgres' superuser for the readiness check.
            # Assumes the PostgreSQL chart creates a secret named '<release-name>-postgresql'
            # with the superuser password under the key 'postgres-password'.
            # !! Verify this secret name and key are correct for your PostgreSQL dependency !!
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-postgresql" .Release.Name }}
                  key: postgres-password
          command: ['sh', '-c']
          args:
            - |
              echo "InitContainer (dex): Waiting for PostgreSQL host ${PG_HOST}:${PG_PORT}..."
              retries=30 # Number of attempts
              delay=5  # Seconds between attempts
              count=0
              # Loop until pg_isready succeeds or retries are exhausted
              until pg_isready -h ${PG_HOST} -p ${PG_PORT} -U postgres -q -t 2; do
                count=$((count + 1))
                if [ $count -ge $retries ]; then
                  echo "InitContainer (dex): PostgreSQL unavailable at ${PG_HOST}:${PG_PORT} after ${retries} attempts. Exiting."
                  exit 1
                fi
                echo "InitContainer (dex): PostgreSQL unavailable - sleeping ${delay}s (Attempt ${count}/${retries})"
                sleep ${delay}
              done
              echo "InitContainer (dex): PostgreSQL is ready!"
          resources: # Define reasonable resources for the init container
            limits:
              cpu: 150m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
      # ===== END Wait for PostgreSQL Init Container =====

      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default (printf "v%s" .Chart.AppVersion) }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - dex
            - serve
            - --web-http-addr
            - 0.0.0.0:5556
            {{- if .Values.https.enabled }}
            - --web-https-addr
            - 0.0.0.0:5554
            {{- end }}
            {{- if .Values.grpc.enabled }}
            - --grpc-addr
            - 0.0.0.0:5557
            {{- end }}
            - --telemetry-addr
            - 0.0.0.0:5558
            - /etc/dex/config.yaml
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- with .Values.envVars }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.envFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 5556
              protocol: TCP
            {{- if .Values.https.enabled }}
            - name: https
              containerPort: 5554
              protocol: TCP
            {{- end }}
            {{- if .Values.grpc.enabled }}
            - name: grpc
              containerPort: 5557
              protocol: TCP
            {{- end }}
            - name: telemetry
              containerPort: 5558
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz/live
              port: telemetry
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: telemetry
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /etc/dex
              readOnly: true
          {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: config
          secret:
            secretName: {{ include "dex.configSecretName" . }}
      {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}