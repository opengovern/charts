global:
  domain: og.app.domain
  debugMode: true
  metricsService: disable
  size: lg

opensecurity:
  docker:
    registry: ghcr.io/opengovern
    tags:
      webui: v2.76.23
      auth: v2.76.30
      swagger: v2.76.13
      checkupJob: v2.76.13
      postInstallJob: v2.76.30
      schedulerService: v2.76.30
      integration: v2.76.30
      core: v2.76.30
      compliance: v2.76.30
      complianceSummarizerJob: v0.465.10
      complianceReportJob: v0.466.4
      esSink: v2.76.13
      complianceQuick: v2.76.13
      queryRunnerJob: v2.76.13
      queryValidatorJob: v2.76.13
      demoImporterJob: v2.76.13
      psqlImport: v2.60.0
      tasks: v2.76.30
  customDeploy:
    externalPostgresql: false
  scaling:
    AuthServiceAutoScaling: # This block must exist to potentially enable HPA
      enabled: true          # This MUST be true to create the HPA resource
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 90
      scaleUpStabilizationSeconds: 180
      scaleDownStabilizationSeconds: 300
  vault:
    keyID: "workspace-creds"
  parallelism:
    complianceReportJobMaxParallelism: 10
    complianceReportLagThreshold: "50" # should be string
    complianceQuickJobMaxParallelism: 5
  compliance: true
  queryvalidator:
    enabled: false
  queryrunner:
    enabled: false
dex:
  configSecret:
    create: false
  image:
    repository: ghcr.io/opengovern/dex-login
    pullPolicy: Always
    tag: v2.60.0
  config:
    grpc:
      addr: 'localhost:5557'
      reflection: true
    enablePasswordDB: true
    connectors: []
    expiry:
      deviceRequests: "5m"
      signingKeys: "6h"
      idTokens: "24h"
      refreshTokens:
        reuseInterval: "3s"
        validIfNotUsedFor: "2160h" # 90 days
        absoluteLifetime: "3960h" # 165 days
    logger:
      level: "debug"
      format: "text" # can also be "json"
    storage:
      type: postgres
      config:
        host: "opensecurity-postgresql-primary.opensecurity.svc.cluster.local" # postgresql host
        port: 5432
        database: dex
        user: dex_service
        password: "password"
        ssl:
          mode: "disable"
    oauth2:
      passwordConnector: local
      skipApprovalScreen: true
      alwaysShowLoginScreen: false
externalPostgresql:
  enabled: false
  endpoint: "pg.example.com"
  port: "5432"
  masterUser: "postgres"
  masterPassword: "postgres"
  sslMode: disable
postgresql:
  enabled: true
  architecture: replication
  readReplicas:
    replicaCount: 0
  image:
    registry: ghcr.io
    repository: opengovern/postgres
    tag: v2.76.19
    pullPolicy: Always
    debug: false
  auth:
    existingSecret: "postgres-secret"
  primary:
    persistence:
      size: 10Gi
    configuration: |
      listen_addresses = '*'
      max_wal_senders = 10
      shared_preload_libraries = 'pg_stat_statements'
      
      max_connections = 100
      shared_buffers = 768MB
      effective_cache_size = 2304MB
      maintenance_work_mem = 384MB
      checkpoint_completion_target = 0.9
      wal_buffers = 16MB
      default_statistics_target = 500
      random_page_cost = 1.1
      effective_io_concurrency = 200
      work_mem = 4915kB
      huge_pages = off
      min_wal_size = 4GB
      max_wal_size = 16GB
    initdb:
      user: "postgres"
      scripts:
        primary_init_script.sh: |
          #!/bin/bash
          ./init.sh

    resources:
      limits:
        memory: '8Gi'
        cpu: '4'
      requests:
        memory: "2Gi"
        cpu: "2"
    # These passwords are random generated
    # Do not change them
    # You can get the passwords running:
    #`kubectl get secret postgres-secret -n <namespace-name> -o json | jq -r '.data.<key>' | base64 --decode`
    extraEnvVars:
      - name: POSTGRES_WORKSPACE_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: workspaceServiceUserPassword
      - name: POSTGRES_AUTH_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: authServiceUserPassword
      - name: POSTGRES_SUBSCRIPTION_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: subscriptionUserPassword

      - name: POSTGRES_INFORMATION_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: informationUserPassword
      - name: DEX_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: dexServiceUserPassword
      - name : POSTGRES_DESCRIBE_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: schedulerUserPassword
      - name : POSTGRES_POLICY_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: policyServiceUserPassword
      - name: POSTGRES_ASSISTANT_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: assistantServiceUserPassword
      - name: POSTGRES_COMPLIANCE_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: complianceServiceUserPassword
      - name: POSTGRES_CORE_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: coreServiceUserPassword
      - name: POSTGRES_REPORTER_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: reporterServiceUserPassword
      - name: POSTGRES_MIGRATOR_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: migratorServiceUserPassword
      - name: POSTGRES_EXPORTER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: postgresExporterUserPassword
      - name: POSTGRES_STEAMPIPE_USER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: steampipeUserPassword
      - name: POSTGRES_ALERTING_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: alertingServiceUserPassword
      - name: POSTGRES_INTEGRATION_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: integrationServiceUserPassword
      - name: POSTGRES_TASK_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgres-secret
            key: taskServiceUserPassword

opensearch:
  enabled: true
  clusterName: opensearch-cluster

  persistence:
    size: 25Gi
  opensearchJavaOpts: "-Xms3072M -Xmx3072M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/share/opensearch/heap-dump.hprof"
  resources:
    limits:
      cpu: 500m
      memory: 7000Mi
    requests:
      cpu: 500m
      memory: 4000Mi
  replicas: 1
  extraEnvs:
    - name: OPENSEARCH_INITIAL_ADMIN_PASSWORD
      value: myStrongPassword@123!
    - name: AWS_REGION
      value: "us-east-2"
  sysctlInit:
    enabled: true
  nodeAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
            - key: opencomply-node
              operator: In
              values:
                - opensearch
  config:
    opensearch.yml: |
      cluster.name: opensearch-cluster
      network.host: 0.0.0.0
      indices.requests.cache.size: 10%
      plugins:
        security:
          ssl:
            transport:
              pemcert_filepath: esnode.pem
              pemkey_filepath: esnode-key.pem
              pemtrustedcas_filepath: root-ca.pem
              enforce_hostname_verification: false
            http:
              enabled: true
              pemcert_filepath: esnode.pem
              pemkey_filepath: esnode-key.pem
              pemtrustedcas_filepath: root-ca.pem
          allow_unsafe_democertificates: true
          allow_default_init_securityindex: true
          authcz:
            admin_dn:
              - CN=kirk,OU=client,O=client,L=test,C=de
          enable_snapshot_restore_privilege: true
          check_snapshot_restore_write_privileges: true
          restapi:
            roles_enabled: ["all_access", "security_rest_api_access"]
          system_indices:
            enabled: true
            indices:
              [
                ".opendistro-alerting-config",
                ".opendistro-alerting-alert*",
                ".opendistro-anomaly-results*",
                ".opendistro-anomaly-detector*",
                ".opendistro-anomaly-checkpoints",
                ".opendistro-anomaly-detection-state",
                ".opendistro-reports-*",
                ".opendistro-notifications-*",
                ".opendistro-notebooks",
                ".opendistro-asynchronous-search-response*",
              ]

  enabled: false
  replicaCount: 1
  resources:
    requests:
      memory: "500Mi"
      cpu: "200m"
    limits:
      memory: "500Mi"
      cpu: "200m"
nats:
  global:
    labels:
      app: job-queue
  natsBox:
    enabled: false
  config:
    cluster:
      noAdvertise: true
      enabled: false
      replicas: 1
    gateway:
      enabled: false
    jetstream:
      enabled: true
      memoryStore:
        enabled: true
        maxSize: 4Gi
      fileStore:
        enabled: true
        storageDirectory: /data
        pvc:
          enabled: true
          size: 25Gi
  container:
    merge:
      resources:
        requests:
          cpu: 200m
          memory: 3Gi
        limits:
          cpu: 2500m
          memory: 6Gi
  statefulSet:
    merge:
      metadata:
        annotations:
          "karpenter.sh/do-not-disrupt": "true"
  promExporter:
    enabled: true
    podMonitor:
      enabled: false

keda:
  enabled: true
